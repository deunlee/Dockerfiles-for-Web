version: "3.7"
# https://github.com/compose-spec/compose-spec/blob/master/spec.md

services:
    mariadb:
        container_name: mariadb
        build: docker/mariadb
        restart: always
        volumes:
            - ./service/mariadb/database:/var/lib/mysql
            - ./service/mariadb/init:/docker-entrypoint-initdb.d:ro
            - ./service/mariadb/config.cnf:/etc/mysql/conf.d/config.cnf:ro
        # ports:
            # - "3306:3306"
        environment:
            TZ: Asia/Seoul
        env_file: ./service/mariadb/docker.env
        # comment:
            # https://hub.docker.com/_/mariadb
            # 기본 데이터베이스명 및 계정 설정은 docker.env 파일에 저장
                # docker-sample.env 파일을 복사해서 수정할 것
            # init 디렉터리에 있는 모든 .sql 파일은 컨테이너 최초 시작시 자동으로 import 됨
                # 컨테이너 최초 시작 여부는 ./service/mariab/database 하위의 mysql 디렉터리 존재 여부로 판단함
                # https://github.com/MariaDB/mariadb-docker/blob/master/10.6/docker-entrypoint.sh
            # 외부 접속을 허용하려면 ports 주석 해제
                # 내부에서는 항상 접속할 수 있으므로 가능하다면 포트를 노출시키지 않는 것이 좋음

    php:
        container_name: php
        build: docker/php
        restart: always
        depends_on:
            - mariadb
        volumes:
            - ./service/php/config.ini:/usr/local/etc/php/conf.d/config.ini:ro
            - ./www/html:/var/www/html
        environment:
            TZ: Asia/Seoul
        command: >
            sh -c 'ln -snf /usr/share/zoneinfo/$$TZ /etc/localtime && 
                   echo $$TZ > /etc/timezone &&
                   printf "[PHP]\ndate.timezone = \"$$TZ\"\n" > /usr/local/etc/php/conf.d/timezone.ini &&
                   exec php-fpm'
        # comment:
            # https://hub.docker.com/_/php
            # https://github.com/docker-library/docs/tree/master/php

    nginx:
        container_name: nginx
        build: docker/nginx
        restart: always
        volumes:
            - ./service/nginx/helper:/etc/nginx/helper:ro
            - ./service/nginx/private:/etc/nginx/private:ro
            - ./service/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./service/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
            # - ./service/certbot:/etc/letsencrypt:ro
            - ./www/html:/var/www/html
            # - ./www/certbot:/var/www/certbot:ro
            - ./log/nginx:/var/log/nginx
        ports:
            - "80:80"
            - "443:443"
        environment:
            TZ: Asia/Seoul
        # extra_hosts:
            # - "host.docker.internal:host-gateway"
        # command: "/bin/sh -c 'while :; do sleep 48h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        # comment:
            # https://hub.docker.com/_/nginx
            # Reload: dce nginx nginx -s reload
            # 호스트에서 돌아가는 서비스에 접근하려면 extra_hosts 주석 해제 (ex: VSCode)
            # Certbot과 연동하려면 command 주석 해제 (48시간마다 다시 로드 => 인증서 업데이트)

    # certbot:
        # container_name: certbot
        # image: certbot/certbot
        # volumes:
            # - ./service/certbot:/etc/letsencrypt
            # - ./www/certbot:/var/www/certbot
        # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 48h & wait $${!}; done;'"
        # comment:
            # https://hub.docker.com/r/certbot/certbot
            # 초기 인증서 설정은 ./script/init_certbot.sh 스크립트 이용 (도메인 및 이메일 수정할 것)

    # nodejs:
        # container_name: nodejs
        # build: docker/nodejs
        # restart: always
        # environment:
            # TZ: Asia/Seoul
        # comment:
            # https://hub.docker.com/_/node
